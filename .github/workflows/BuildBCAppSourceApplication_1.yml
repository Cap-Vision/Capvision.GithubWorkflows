name: 'Build App Source Application'

on:
  workflow_call:
    inputs:
      appProjectFolder:
        required: false
        type: string
        default: 'Application'
      artifact:
        required: false
        type: string
        default: 'bcartifacts/sandbox//fr/Latest'
      publishArtifactName:
        required: false
        type: string
        default: 'App'
      publishArtifact:
        required: false
        type: boolean
        default: true
      addPreprocessorSymbols:
        required: false
        type: string
        default: 'RELEASE'-
      removePreprocessorSymbols:
        required: false
        type: string
        default: 'DEBUG'
      appArtifactSource:
        required: false
        type: string
        default: 'default'
        # options:
        # - default
        # - appsource-rc
        # - appsource-stable
      artifactCachePath:
        required: false
        type: string
        default: 'C:\.artifacts'
    secrets:
      pfxFile:
        required: true
      pfxPassword:
        required: true
      sasToken:
        required: true
      bcArtifactsNugetPassword:
        required: true
      bcArtifactsStableSource:
        required: true
      bcArtifactsRcSource:
        required: true

jobs:
  build:
    runs-on: windows-latest
    steps:

    - name: 'Checkout repository'
      uses: actions/checkout@v3
      with:
        path: 's'

    - name: 'Checkout Github workflows'
      uses: actions/checkout@v3
      with:
        repository: Cap-Vision/Capvision.GithubWorkflows
        path: 'Capvision.GithubWorkflows'

    - name: 'Download current build pipeline artifacts'
      uses: actions/download-artifact@v3
      with:
        path: 's/${{ inputs.appProjectFolder }}/.alpackages'   

    - name: 'Copy current build pipeline artifacts to Application/.alpackages'
      run: |
          $alpackagesPath = "./s/${{ inputs.appProjectFolder }}/.alpackages"
          if (Test-Path -Path "$alpackagesPath" -PathType Container) {
            Get-ChildItem -Path "$alpackagesPath\*" -Include *.app -Recurse | Copy-Item -Destination "$alpackagesPath"
          }

    - name: 'Install pre-requisites (BCContainerHelper)'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\InstallPSModule@1.ps1 `
          -ModuleName "BCContainerHelper"

    - name: 'Set Business Central Application Build Version'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\SetBCApplicationVersion@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" `
          -minorVersion "$(Get-Date -Format yyyyMM)" `
          -buildVersion "${{ github.run_number }}"

    - name: 'Add Preprocessor Symbols'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\AddBCPreprocessorSymbols@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" `
          -preprocessorSymbols "${{ inputs.addPreprocessorSymbols }}"
      if: ${{ inputs.addPreprocessorSymbols != '' }}

    - name: 'Remove Preprocessor Symbols'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\RemoveBCPreprocessorSymbols@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" `
          -preprocessorSymbols "${{ inputs.removePreprocessorSymbols }}"
      if: ${{ inputs.removePreprocessorSymbols != '' }}
        
    - name: 'Get Application Name from app.json'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\GetBCApplicationInfo@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" `
          -propertyName "name" `
          -vsoOutputVariableName "MY_APPNAME"    

    - name: 'Get Application Publisher from app.json'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\GetBCApplicationInfo@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" `
          -propertyName "publisher" `
          -vsoOutputVariableName "MY_APPPUBLISHER"    

    - name: 'Get Application Version from app.json'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\GetBCApplicationInfo@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" `
          -propertyName "version" `
          -vsoOutputVariableName "MY_APPVERSION"    

    - name: 'Looking for best matching NuGet source'
      run: |
        $appArtifactSource = "${{ inputs.appArtifactSource }}"
        $artifact = "${{ inputs.artifact }}"

        If ("appsource-stable" -eq $appArtifactSource) {
          $feedSource = "${{ secrets.bcArtifactsStableSource }}"
          Write-Host "Stable feed is selected"
        }
        ElseIf ("appsource-rc" -eq $appArtifactSource) {
          $feedSource = "${{ secrets.bcArtifactsRcSource }}"
          Write-Host "Release-candidate feed is selected"
        }
        ElseIf (!$artifact.Contains("bcartifacts")) {
          $feedSource = "${{ secrets.bcArtifactsRcSource }}"
          Write-Host "Release-candidate feed is selected"
        }
        Else {
          $feedSource = "${{ secrets.bcArtifactsStableSource }}"
          Write-Host "Stable feed is selected by default"
        }
        Write-Host "Feed URL: $($feedSource.SubString(7))"
        "bcArtifactsFeedSource=$feedSource" >> $env:GITHUB_ENV

    - name: 'Enable NuGet Feed access'
      run: |
        if ((Get-PackageProvider -Name NuGet | Get-PackageSource | Where-Object { $_.Name -eq "appsource-stable" }).Count -eq 1) {
          Write-Host "::debug::Feed already exists"
        } else {
          nuget sources add -name "appsource-stable" -source "${{ env.bcArtifactsFeedSource }}" -username "az" -password ${{ secrets.bcArtifactsNugetPassword }}
        }
      continue-on-error: true
        
    - name: 'Create .nuspec and packages.config files'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\CreateNuspecFromBCApplication@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" `
          -nuspecOutputFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}"
      
          
    - name: 'Download AL packages (dependencies) from Nuget'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\DownloadALPackagesFromNuget@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" 
      continue-on-error: true

    - name: 'Download Business Central Artifacts'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\DownloadBCArtifacts@1.ps1 `
          -artifact "${{ inputs.artifact }}" `
          -sasToken "${{ secrets.sasToken }}" `
          -cachePath "${{ inputs.artifactCachePath }}"

    - name: 'Copy *.app files from Business Central Platform Artifacts'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\CopyFiles@1.ps1 `
          -sourcePath "$(al.platformartifactsfolder)" `
          -targetPath "${{ inputs.appProjectFolder }}\.alpackages" `
          -filter "System.app"

    - name: 'Copy *.app files from Business Central Artifacts'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\CopyFiles@1.ps1 `
          -sourcePath "$(al.artifactsfolder)" `
          -targetPath "${{ inputs.appProjectFolder }}\.alpackages" `
          -filter "*.app"    

    - name: 'Download current release for App Source Cop'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\DownloadCurrentReleaseALPackageForAppSourceCop@1.ps1 `
          -appName "${{ env.MY_APPNAME }}" `
          -appPublisher "${{ env.MY_APPPUBLISHER }}" `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}"
      continue-on-error: true

    - name: 'Compile Business Central Application'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\CompileBCApplication@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}" `
          -alcFolder "$(al.alcfolder)" `
          -codeAnalyzers "CodeCop,UICop,AppSourceCop" `
          -vsoAppFileOutputVariableName "${{ env.MY_APPFILE }}"

    - name: 'Check all trans-units exist in translation files'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\CheckAllTransUnitsExistInTranslationFiles@1.ps1 `
          -appProjectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}"

    - name: 'Install SIP Provider'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\InstallBcSipProvider@1.ps1 `
          -platformArtifact "$(al.platformartifactsfolder)"
      if: ${{ inputs.publishArtifact && inputs.publishArtifactName != '' }}

    - name: 'Sign application'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\SignBCApp@1.ps1 `
          -appFile "${{ env.MY_APPFILE }}" `
          -pfxFile: "${{ secrets.pfxFile }}" `
          -pfxPassword: "${{ secrets.pfxPassword }}"
      if: ${{ inputs.publishArtifact && inputs.publishArtifactName != '' }}    

    - name: 'Publish App artifact'
      uses: actions/upload-artifact@v3
      with: 
        name: '${{ inputs.appProjectFolder }} ${{ inputs.publishArtifactName }}'
        path: ${{ env.MY_APPFILE }}
      if: ${{ inputs.publishArtifact && inputs.publishArtifactName != '' }}

    - name: 'Create archive with dependencies'
      run: |
        ${{ github.workspace }}\Capvision.GithubWorkflows\actions\MakeZipWithDependencies@1.ps1 `
          -publisherName "$(my.apppublisher)" `
          -appName "$(my.appname)" `
          -projectFolder "${{ github.workspace }}\s\${{ inputs.appProjectFolder }}"
      if: ${{ inputs.publishArtifact && inputs.publishArtifactName != '' }}

    - name: 'Publish App dependency artifact'
      uses: actions/upload-artifact@v3
      with: 
        name: '${{ inputs.appProjectFolder }} ${{ inputs.publishArtifactName }} Dependencies'
        path: '${{ github.workspace }}\s\${{ inputs.appProjectFolder }}\.alpackages\dependencies.zip'
      if: ${{ inputs.publishArtifact && inputs.publishArtifactName != '' }}
