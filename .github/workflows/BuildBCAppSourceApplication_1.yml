name: 'Build App Source Application'

on:
  workflow_call:
    inputs:
      appProjectFolder:
        required: false
        type: string
        default: 'Application'
      artifact:
        required: false
        type: string
        default: 'bcartifacts/sandbox//fr/Latest'
      publishArtifactName:
        required: false
        type: string
        default: 'App'
      addPreprocessorSymbols:
        required: false
        type: string
        default: 'RELEASE'
      removePreprocessorSymbols:
        required: false
        type: string
        default: 'DEBUG'
      appArtifactSource:
        required: false
        type: choice
        options:
        - default
        - appsource-rc
        - appsource-stable
      artifactCachePath:
        required: false
        type: string
        default: 'C:\.artifacts'
    secrets:
      pfxFile:
        required: true
      pfxPassword:
        required: true
      sasToken:
        required: true
      bcArtifactsNugetPassword:
        required: true

jobs:
  build:
    runs-on: windows-latest
    steps:

    - name: 'Checkout repository'
      uses: actions/checkout@v3
      path: 's'

    - name: 'Checkout DevOpsPipelines'
      uses: actions/checkout@v3
      with:
        repository: Cap-Vision/Capvision.DevOpsPipelines
        path: 'Capvision.DevOpsPipelines'

  # - task: DownloadPipelineArtifact@2
  #   inputs:
  #     path: '${{ inputs.appProjectFolder }}/.alpackages'
  #   name: 'Download current build pipeline artifacts'

  - name: 'Copy current build pipeline artifacts to Application/.alpackages'
    run: |
        $alpackagesPath = "./${{ inputs.appProjectFolder }}/.alpackages"
        Get-ChildItem -Path "$alpackagesPath\*" -Include *.app -Recurse | Copy-Item -Destination "$alpackagesPath"

  - name: 'Install pre-requisites (BCContainerHelper)'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\InstallPSModule@1.ps1 `
        -ModuleName "BCContainerHelper"

  - name: 'Set Business Central Application Build Version'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\SetBCApplicationVersion@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" `
        -minorVersion "$(Get-Date -Format yyyyMM)" `
        -buildVersion "${{ github.run_number }}"

  - name: 'Add Preprocessor Symbols'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\AddBCPreprocessorSymbols@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" `
        -preprocessorSymbols "${{ inputs.addPreprocessorSymbols }}"
    if: ${{ inputs.addPreprocessorSymbols != '' }}

  - name: 'Remove Preprocessor Symbols'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\RemoveBCPreprocessorSymbols@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" `
        -preprocessorSymbols "${{ inputs.removePreprocessorSymbols }}"
    if: ${{ inputs.removePreprocessorSymbols != '' }}
      
  - name: 'Get Application Name from app.json'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\GetBCApplicationInfo@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" `
        -propertyName "name" `
        -vsoOutputVariableName "MY_APPNAME"    

  - name: 'Get Application Publisher from app.json'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\GetBCApplicationInfo@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" `
        -propertyName "publisher" `
        -vsoOutputVariableName "MY_APPPUBLISHER"    

  - name: 'Get Application Version from app.json'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\GetBCApplicationInfo@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" `
        -propertyName "version" `
        -vsoOutputVariableName "MY_APPVERSION"    

  - name: 'Looking for best matching NuGet source'
    run: |
      $appArtifactSource = "${{ inputs.appArtifactSource }}"
      $artifact = "${{ inputs.artifact }}"

      If ("appsource-stable" -eq $appArtifactSource) {
        $feedSource = "$(bcArtifactsStableSource)"
        Write-Host "Stable feed is selected"
      }
      ElseIf ("appsource-rc" -eq $appArtifactSource) {
        $feedSource = "$(bcArtifactsRcSource)"
        Write-Host "Release-candidate feed is selected"
      }
      ElseIf (!$artifact.Contains("bcartifacts")) {
        $feedSource = "$(bcArtifactsRcSource)"
        Write-Host "Release-candidate feed is selected"
      }
      Else {
        $feedSource = "$(bcArtifactsStableSource)"
        Write-Host "Stable feed is selected by default"
      }
      Write-Host "Feed URL: $($feedSource.SubString(7))"
      "bcArtifactsFeedSource=$feedSource" >> $env:GITHUB_ENV

  - name: 'Enable NuGet Feed access'
    run: |
      if ((Get-PackageProvider -Name NuGet | Get-PackageSource | Where-Object { $_.Name -eq "appsource-stable" }).Count -eq 1) {
        Write-Host "##[debug]Feed already exists"
      } else {
        nuget sources add -name "appsource-stable" -source "${{ env.bcArtifactsFeedSource }}" -username "az" -password ${{ secrets.bcArtifactsNugetPassword }}
      }
    continue-on-error: true
      
  - name: 'Create .nuspec and packages.config files'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\CreateNuspecFromBCApplication@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" `
        -nuspecOutputFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}"
    
        
  - name: 'Download AL packages (dependencies) from Nuget'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\DownloadALPackagesFromNuget@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" 
    continue-on-error: true

  - name: 'Download Business Central Artifacts'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\DownloadBCArtifacts@1.ps1 `
        -artifact "${{ inputs.artifact }}" `
        -sasToken "${{ secrets.sasToken }}" `
        -cachePath "${{ inputs.artifactCachePath }}"

  - name: 'Copy *.app files from Business Central Platform Artifacts'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\CopyFiles@1.ps1 `
        -sourcePath "$(al.platformartifactsfolder)" `
        -targetPath "${{ inputs.appProjectFolder }}\.alpackages" `
        -filter "System.app"

  - name: 'Copy *.app files from Business Central Artifacts'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\CopyFiles@1.ps1 `
        -sourcePath "$(al.artifactsfolder)" `
        -targetPath "${{ inputs.appProjectFolder }}\.alpackages" `
        -filter "*.app"    

  - name: 'Download current release for App Source Cop'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\DownloadCurrentReleaseALPackageForAppSourceCop@1.ps1 `
        -appName "${{ env.MY_APPNAME }}" `
        -appPublisher "${{ env.MY_APPPUBLISHER }}" `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}"
    continue-on-error: true

  - name: 'Compile Business Central Application'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\CompileBCApplication@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}" `
        -alcFolder "$(al.alcfolder)" `
        -codeAnalyzers "CodeCop,UICop,AppSourceCop" `
        -vsoAppFileOutputVariableName "${{ env.MY_APPFILE }}"

  - name: 'Check all trans-units exist in translation files'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\CheckAllTransUnitsExistInTranslationFiles@1.ps1 `
        -appProjectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}"

  - name: 'Install SIP Provider'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\InstallBcSipProvider@1.ps1 `
        -platformArtifact "$(al.platformartifactsfolder)"
    if: ${{ inputs.publishArtifactName != '' && secrets.pfxFile != '' }}

  - name: 'Sign application'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\SignBCApp@1.ps1 `
        -appFile "${{ env.MY_APPFILE }}" `
        -pfxFile: "${{ secrets.pfxFile }}" `
        -pfxPassword: "${{ secrets.pfxPassword }}"
    if: ${{ inputs.publishArtifactName != '' && secrets.pfxFile != '' }}    

  - name: 'Publish App artifact'
    uses: actions/upload-artifact@v3
    with: 
      name: '${{ inputs.appProjectFolder }} ${{ inputs.publishArtifactName }}'
      path: ${{ env.MY_APPFILE }}
    if: ${{ inputs.publishArtifactName != '' }}

  - name: 'Create archive with dependencies'
    run: |
      ..\Capvision.DevOpsPipelines\Powershell\MakeZipWithDependencies@1.ps1 `
        -publisherName "$(my.apppublisher)" `
        -appName "$(my.appname)" `
        -projectFolder "${{ github.workspace }}\${{ inputs.appProjectFolder }}"
    if: ${{ inputs.publishArtifactName != '' }}

  - name: 'Publish App dependency artifact'
    uses: actions/upload-artifact@v3
    with: 
      name: '${{ inputs.appProjectFolder }} ${{ inputs.publishArtifactName }} Dependencies'
      path: '${{ github.workspace }}\${{ inputs.appProjectFolder }}\.alpackages\dependencies.zip'
    if: ${{ inputs.publishArtifactName != '' }}
